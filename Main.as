package {	import flash.display.Sprite;	import flash.events.*;	import flash.text.TextField;	import flash.media.Sound;	public class Main extends Sprite {		public var CENTER:Number;		public var array:Array;		public var doubleArea1:Sprite;		public var doubleArea2:Sprite;		public var stageWidth;		public var stageHeight;		public var banner:GameWin;		public var transSound:TransitionSound = new TransitionSound();		public var dropSound:DropSound = new DropSound();		public var ng:PrepareToFight = new PrepareToFight();		public var applause:Applause = new Applause();		public function Main() {			setBoard();			makeCircles();			addEventListener(MouseEvent.MOUSE_DOWN, onMousedown);			addEventListener(MouseEvent.MOUSE_UP, onMouseup);			addEventListener(Event.ENTER_FRAME, onEnterFrame);			newGameButton.addEventListener(MouseEvent.CLICK, newGame);		}		public function setBoard() {			stageWidth = this.stage.stageWidth;			stageHeight = this.stage.stageHeight;			doubleArea1 = new Sprite();			doubleArea1.graphics.beginFill(0xE6FF99, 1);			doubleArea1.graphics.drawCircle(0, 0, 150);			doubleArea1.graphics.endFill();			doubleArea1.x = 0;			doubleArea1.y = stageHeight;			addChildAt(doubleArea1, 1);			doubleArea2 = new Sprite();			doubleArea2.graphics.beginFill(0xE6FF99, 1);			doubleArea2.graphics.drawCircle(0, 0, 150);			doubleArea2.graphics.endFill();			doubleArea2.x = stageWidth;			doubleArea2.y = stageHeight;			addChildAt(doubleArea2, 1);			blueScore.selectable = false;			redScore.selectable = false;			blueScore.text = "0";			redScore.text = "0";			Circle.redScore = redScore;			Circle.blueScore = blueScore;			var dmLine:Demarcation = new Demarcation();			dmLine.x = stageWidth / 2;			dmLine.y = 188;			CENTER = dmLine.x;			addChild(dmLine);		}		public function makeCircles() {			promptText.text = "";			array = new Array();// here circles are stored			var numArray:Array = new Array();// here numbers are stored			var numberOfCircles:int = 8;			var sum:int = 100 + Math.random() * 400;//the random sum is made up (one for two number pools)			for (var k:int = 0; k<2; k++) {//the random sum is split into random summands for two pools				var tempSum = sum;				var counter:int = 1;				do {					if (counter == 1) {						numArray.push(Math.floor(Math.random()*(tempSum/1.8-7)+7));					}					else if(counter == 2) {						numArray.push(Math.floor(Math.random()*(tempSum/1.4-7)+7));					}					else if(counter == 3) {						numArray.push(Math.floor(Math.random()*(tempSum/1.2-7)+7));					}					else numArray.push(Math.floor(Math.random()*(tempSum-7)+7));					tempSum -=  numArray[numArray.length - 1];					if (tempSum>(numArray[numArray.length-1]*2+20) && Math.random()<0.7) {// some numbers(circles) will have to be doubled in order to win the game						tempSum -=  numArray[numArray.length - 1];						trace("double:", numArray[numArray.length-1]);						//promptText.appendText(numArray[numArray.length-1] + ", "); 					}					counter++;				} while (tempSum>20);				numArray.push(int(tempSum));			}			trace("Circles created:", numArray);			numArray.sort(randomSort);			// the array is mixed randomly because numbers need to be placed in random circles so that we cannot visually figure out where pools end/begin;			for (var i:int = 0; i<numArray.length; i++) {// the numbers are put into circles				var c = new Circle(int(numArray[i]));				c.x = Math.random() * 400 + 140;// the position on x axis is random				c.y = i*(stageHeight/numArray.length-6)+90-numArray.length*2;// the y position is determined in one-by-one pattern				c.x >= CENTER ? c.isBlue = true:c.isBlue = false;				if (c.isBlue == true) {					c.changeColor();					blueScore.text = String(int(blueScore.text) + c.getValue());				}				else {					redScore.text = String(int(redScore.text) + c.getValue());				}				array.push(c);				addChild(c);			}		}		public function onMousedown(e:Event) {			try { // the clicked object might be anything that is a child of the main sprite (stage, idk...)				if (e.target is TextField) {					this.setChildIndex(Circle(e.target.parent), array.length+5);					e.target.parent.startDrag();				}				else {					this.setChildIndex(Circle(e.target), array.length+5);					e.target.startDrag();				}			} catch (e:Error) {				trace("Unmovable object selected");			}		}		public function onMouseup(e:Event) {			if (e.target is TextField) {				e.target.parent.stopDrag();			}			else {				e.target.stopDrag();			}		}		public function onEnterFrame(e:Event) {			var somethingchanged = false;			for (var i in array) {				var circle = array[i];				var variable:int = 0;				if (circle.isBlue) {					variable = stageWidth;				}				if (! circle.inDoubleArea && Math.sqrt(Math.pow(variable - circle.x,2) + Math.pow(stageHeight - circle.y,2)) < 140) {					circle.isBlue ? blueScore.text = String(int(blueScore.text) + circle.getValue()):redScore.text = String(int(redScore.text) + circle.getValue());					circle.setValue(circle.getValue()*2);					circle.inDoubleArea = true;					somethingchanged = true;					dropSound.play();				}				else if (circle.inDoubleArea && Math.sqrt(Math.pow(variable - circle.x, 2) + Math.pow(stageHeight - circle.y, 2)) > 140) {					circle.setValue(circle.getValue()/2);					circle.inDoubleArea = false;					circle.isBlue ? blueScore.text = String(int(blueScore.text) - circle.getValue()):redScore.text = String(int(redScore.text) - circle.getValue());					somethingchanged = true;				}				if (circle.x > CENTER && ! circle.isBlue) {					circle.changeColor();					circle.isBlue = true;					redScore.text = String(int(redScore.text) - circle.getValue());					blueScore.text = String(int(blueScore.text) + circle.getValue());					somethingchanged = true;					transSound.play();				}				else if (circle.x <= CENTER && circle.isBlue) {					circle.changeColor();					circle.isBlue = false;					redScore.text = String(int(redScore.text) + circle.getValue());					blueScore.text = String(int(blueScore.text) - circle.getValue());					somethingchanged = true;					transSound.play();				}			}			if (somethingchanged) {				checkIfWin();			}		}		private function randomSort(a:int, b:int) {			if (Math.random() >= 0.5) {				return 1;			}			else {				return -1;			}		}		private function checkIfWin() {			if (int(redScore.text) == int(blueScore.text)) {				triggerWin();			}		}				private function triggerWin() {			trace("gamewin created");			applause.play();			banner = new GameWin();			banner.x = 0; banner.y = 39;			addChild(banner);			}					private function newGame(e:MouseEvent) {			trace("new Game");			try {				this.removeChild(banner);			} catch(e:Error) {				trace("there is no win banner");			}			while(array.length!=0) {				this.removeChild(array.pop());				redScore.text = "0";				blueScore.text = "0";			}			makeCircles();			ng.play();		}	}}